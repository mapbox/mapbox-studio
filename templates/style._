<!DOCTYPE html>
<html>

<head>
  <meta charset='UTF-8'/>
  <link href='/ext/codemirror.css' rel='stylesheet' />
  <link href='/ext/mapbox.css' rel='stylesheet' />
  <link href='/ext/base/base.css' rel='stylesheet' />
  <link href='/app/app.css' rel='stylesheet' />
  <link href='/app/style.css' rel='stylesheet' />
  <script src='/ext/underscore-min.js'></script>
  <script src='/ext/codemirror.js'></script>
  <script src='/ext/codemirror.runmode.js'></script>
  <script src='/ext/jquery-2.0.3.min.js'></script>
  <script src='/ext/jquery.sortable.js'></script>
  <script src='/ext/backbone.js'></script>
  <script src='/ext/mapbox.js'></script>
  <script src='/app/lib.js'></script>
  <script src='/app/codemirror.carto.js'></script>
  <script src='/app/codemirror.carto.complete.js'></script>
  <script src='/app/codemirror.search.js'></script>
  <script src='/app/codemirror.search.cursor.js'></script>
  <title><%= style.name %></title>
</head>

<body id='view'>

<div id='perf'></div>

<div id='data' class='pane pin-topleft animate offcanvas-left fill-blue dark scroll-styled col3'>
  <section class='pad2 keyline-bottom'>
    <h3>Sources</h3>
    <nav class='pin-topright pad1'>
      <a class='inline pad1 icon quiet close' href='#layers'></a>
    </nav>
  </section>
  <div class='grid pad1 clearfix'>
  <%
    print(_(history.source).chain()
      .sortBy(function(item) {
        return (item.name||'').toLowerCase();
      })
      .map(function(item) {
        return this.sourceitem(_({active:item.id === style.source}).defaults(item));
      }.bind(this))
      .value().join(''));
  %>
  </div>
</div>

<form id='settings' class='z10 animate fill-darken2 scroll-styled col12 pin-left'>
  <div class='col6 pin-right fill-blue dark scroll-styled'>
    <%= this.history(obj) %>
  </div>
  <div class='col6 pin-left'>
    <div class='project-settings fill-light round contain col6 pin-topleft'>
      <header class='pad1 keyline-bottom'>
        <h4>Settings</h4>
        <a class='pin-topright inline quiet pad1 icon x' href='#'></a>
      </header>
      <div class='pad2'>
        <fieldset>
          <section class='space-bottom1'>
            <label>Name</label>
            <input class='short small stretch' name='name' type='text' value='<%= _(style.name).escape() %>'/>
          </section>
          <section class='space-bottom1'>
            <label>Description</label>
            <textarea class='short small stretch' name='description' type='text' cols='60' rows='8'><%= style.description %></textarea>
          </section>
          <section class='space-bottom1'>
            <label>Attribution</label>
            <input class='short small stretch' name='attribution' type='text' value='<%= _(style.attribution).escape() %>'></textarea>
          </section>
        </fieldset>
        <fieldset class='pad1 space-bottom2 keyline-all round'>
          <section class='space-bottom1 clearfix'>
            <label class='inline col4'>Image format</label>
            <select name='format'>
              <% _({
                'png24': 'png (24-bit)',
                'png8:m=h': 'png (256 colors)',
                'png8:m=h:c=192': 'png (192 colors)',
                'png8:m=h:c=128': 'png (128 colors)',
                'png8:m=h:c=64': 'png (64 colors)',
                'png8:m=h:c=32': 'png (32 colors)',
                'jpeg95': 'jpeg (95%)',
                'jpeg90': 'jpeg (90%)',
                'jpeg85': 'jpeg (85%)',
                'jpeg80': 'jpeg (80%)'
              }).each(function(label, format) { %>
              <option value='<%= format %>' <% if (style.format === format) { %> selected='selected' <% } %>><%= label %></option>
              <% }); %>
            </select>
          </section>
          <section class='space-bottom0 clearfix'>
            <label class='inline col4'>Minzoom</label>
            <input id='minzoom' name='minzoom' class='min' type='range' value='<%= style.minzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "max", "#maxzoom");' />
            <span class='small quiet code inline range' id='minzoom-val'><%= style.minzoom %></span>
          </section>
          <section class='space-bottom0 clearfix'>
            <label class='inline col4'>Maxzoom</label>
            <input id='maxzoom' name='maxzoom' class='max' type='range' value='<%= style.maxzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "min", "#minzoom");' />
            <span class='small quiet code inline range' id='maxzoom-val'><%= style.maxzoom %></span>
          </section>
          <section class='space-bottom0 clearfix'>
            <label class='inline col4'>Scale</label>
            <input id='scale' name='scale' type='range' value='<%= style.scale %>' min='1' max='4' step='1' onchange='rangeHandler(this, "scale", "#scale");' />
            <span class='small quiet code inline range' id='scale-val'><%= style.scale %></span>
          </section>
        </fieldset>

        <section class='pill col12 clearfix'><!--
          --><a href='#' class='button quiet col6 icon js-save floppy'>Save</a><!--
          --><a href='/style.tm2z?id=<%=style.id%>' class='button quiet col6 submit icon package'>Package</a>
        </section>
      </div>
    </div>
  </div>
</form>

<div id='full' class='clip animate col6 pin-left'>

  <div id='title' class='contain inline pin-topleft z10'>
    <div class='inline clip fill-darken2 row1'><!--
      --><a href='#settings' class='unround icon sprocket project-name js-name button inline quiet'><%= style.name || 'Untitled' %></a><!--
      <% if (style._tmp) { %>
        --><a class='js-save settings-n button icon inline floppy unround' href='#saveas'>Save as</a>
      <% } else { %>
        --><a class='js-save settings-n button icon inline floppy unround' href='#'>Save</a>
      <% } %>
    </div>
  </div>
  <div id='map' class='animate' style='background-color:<%=style.background%>;'></div>
  <div id='map-overlay' class='overlay'></div>
  <div id='map-errors'></div>
  <div id='zoomedto' class='z<%=style.center[2]%>'></div>
  <div id='map-controls' class='pad1'>
    <div class='inline'>
      <div class='round keyline-all z1 fill-white'>
        <a href='#' id='zoom-in' class='icon plus keyline-right quiet'></a><!--
        --><a href='#' id='zoom-out' class='icon minus keyline-right quiet'></a>
      </div>
    </div>
    <a href='#full' class='full-n round inline keyline-all fill-white icon fullscreen quiet'></a>
    <a href='#' class='full-y round keyline-all fill-dark dark icon close'></a>
  </div>
</div>

<div id='code' class='animate z1 col6 pin-right fill-light'>

  <div id='docs' class='animate pin-left fill-grey scroll-styled col6'>
    <%= this['styledocs'](cartoRef) %>
  </div>

  <div id='fonts' class='animate pin-left col6 scroll-styled fill-grey'>
    <header class='pad1x pad0y keyline-bottom'>
      <h3 class='icon pad0y font'>Fonts</h3>
      <nav class='pin-topright'>
        <a class='inline pad1 strong small icon quiet return' href='#docs'></a>
      </nav>
    </header>
    <% fontsRef.forEach(function(font) { %>
    <div class='keyline-bottom'><span class='pad0 single-font' style='background-image:url("/font.png?id=<%=font%>")'><%=font%></span></div>
    <% }); %>
  </div>

  <div id='layers' class='animate pin-left col6 menu dark fill-dark'>
    <nav class='row1 col12 pin-top fill-dark keyline-bottom z100'>
      <div class='pin-topleft pad0'><!--
        --><a href='#data' class='button short data-n icon plus quiet'>Data</a><!--
        --><a href='#layers' class='button short data-y icon x quiet'>Data</a>
      </div>
    </nav>
    <div class='js-menu-content pin-left col12 top4 scroll-styled'>
    <%= _(sources).map(this.sourcelayers).join('\n') %>
    </div>
  </div>

  <div class='row1 fill-light pin-top'>
    <div class='pin-topleft fill-gray z1 keyline-bottom row1'><!--
    --><a class='pad1 inline quiet docs-n icon help unround align-middle fill-darken0 keyline-right' href='#docs'></a><!--
      --><a class='pad1 inline quiet docs-y icon x unround align-middle fill-darken0 keyline-right' href='#'></a><!--
      --><a class='pad1 inline quiet layers-n icon menu align-middle fill-darken0 keyline-right' href='#layers'></a><!--
      --><a class='pad1 inline quiet layers-y icon x unround align-middle fill-darken0 keyline-right' href='#'></a>
    </div>
    <nav id='tabs' class='keyline-left row1 keyline-bottom pad0y pin-top fill-darken0 contain small'><!--
      --><a rel='template' href='#code-template' class='tab js-tab round quiet mini icon tooltip'></a><!--
      <% _(style.styles).keys().forEach(function(k,i) { %>
      --><a rel='<%=k%>' href='#code-<%=k.replace(/[^\w+]/g,'_')%>' class='strong quiet tab js-tab round pad0 truncate contain <%=!i?'active':''%>'><%=k.replace(/.mss/,'')%> <span class='icon trash js-deltab pin-right pad0y round-right'></span></a><!--
      <% }); %>
    -->
      <span class='z1'>
        <a class='inline round pad0 short quiet icon plus' href='#addtab'></a>
      </span>
    </nav>
  </div>
  <form id='interactivity' class='fill-light space row1 pad1 keyline-bottom pin-top'>
    <label class='small'>Layer</label>
    <select name='interactivity_layer'>
      <option value=''>&lt; choose layer &gt;</option>
      <% _(sources).each(function(source) { %>
      <% _(source.vector_layers||{}).each(function(l) { %>
      <option value='<%=l.id%>' <% if (style.interactivity_layer === l.id) { %>selected='selected'<% } %>><%=l.id%></option>
      <% }); %>
      <% }); %>
    </select>
  </form>

</div>

<%= this.modalmessage() %>
<%= this.modalmapbox() %>
<%= this.modalbrowseropen({cwd:cwd, type:'style'}) %>
<%= this.modalbrowseropen({cwd:cwd, type:'source'}) %>
<%= style._tmp ? this.modalbrowsersave({cwd:cwd, type:'style'}) : '' %>

<form id='addtab' class='modal center round pad2 col6 margin3 fill-light'>
  <a class='pad1 quiet submit icon x pin-topright' href='#'></a>
  <div class='clearfix'>
    <span class='input-pill pill col8 margin2'>
      <input class='col8' type='text' placeholder='filename' size='20' id='addtab-filename' required/><!--
      --><input class='col4 round-right' type='submit' value='New tab'/>
    </span>
  </div>
</form>

<div id='mask' class='fill-darken2 animate'></div>

<script>
var map = baselayer = tiles = grids = gridc = null;

var templates = {};
templates.sourceitem = <%= this.sourceitem.source %>;
templates.sourcelayers = <%= this.sourcelayers.source %>;
statHandler('drawtime')();

var Tab = function(id, value) {
  var tab = CodeMirror(document.getElementById('code'), {
    value: value,
    lineNumbers: true,
    mode: {
      name: 'carto',
      reference: window.cartoRef
    }
  });
  var completer = cartoCompletion(tab, window.cartoRef);

  /*
  @TODO
  function updateSelectors(model) {
      var ids = _.map(model.get('Layer').pluck('id'),
          function(x) { return '#' + x; });
      var classes = _(model.get('Layer').pluck('class')).chain().map(
          function(c) {
              if (c == undefined) return '';
              var cs = c.split(' ');
              if (cs[0] == '') return '';
              return _.map(cs, function(x) { return '.' + x; });
          }).flatten().compact().value();
      cartoCompleter.ids(ids);
      cartoCompleter.classes(classes);
  }
  this.model.bind('change', updateSelectors);
  updateSelectors(this.model);
  */

  tab.setOption('onKeyEvent', completer.onKeyEvent);
  tab.setOption('onHighlightComplete', _(completer.setTitles).throttle(100));
  tab.getWrapperElement().id = 'code-' + id.replace(/[^\w+]/g,'_');
  return tab;
};
var code = _(<%=JSON.stringify(style.styles)%>).reduce(function(memo, value, k) {
  memo[k] = Tab(k, value);
  return memo;
}, {});

// Add in interactivity template.
code['template'] = Tab('template', <%=JSON.stringify(style.template)%>);

_(code).toArray().shift().getWrapperElement().className += ' active';

var Style = Backbone.Model.extend({});
Style.prototype.url = function() { return '/style.json?id=' + this.get('id'); };

var Source = Backbone.Model.extend({});
Source.prototype.url = function() { return '/source.json?id=' + this.get('id'); };

var Editor = Backbone.View.extend({});
Editor.prototype.events = {
  'click .js-save': 'save',
  'click .js-recache': 'recache',
  'submit #settings': 'save',
  'submit #addtab': 'addtab',
  'submit #addmapbox': 'addmapbox',
  'click #tabs .js-deltab': 'deltab',
  'click #tabs .js-tab': 'tabbed',
  'click #docs .js-docs-nav': 'scrollto',
  'click #docs .js-tab': 'tabbed',
  'click #settings .js-tab': 'tabbed',
  'click #layers .js-tab': 'tabbed',
  'click #data .js-adddata': 'adddata',
  'click #settings .js-ref-delete': 'delstyle',
  'click #zoom-in': 'zoomin',
  'click #zoom-out': 'zoomout',
  'click .js-expandall': 'expandall',
  'keydown': 'keys'
};

Editor.prototype.keys = function(ev) {
  // Escape. Collapses windows, dialogs, modals, etc.
  if (ev.which === 27) {
    window.location.href = '#';
  }
  if ((!ev.ctrlKey && !ev.metaKey) || ev.shiftKey) return;
  var which = ev.which;
  switch (true) {
  case (which === 83): // s
    this.save();
    break;
  case (which === 187): // +
    map.zoomBy(1);
    break;
  case (which === 189): // -
    map.zoomBy(-1);
    break;
  case (which === 72): // h for help
    ev.preventDefault();
    this.togglePane('docs');
    break;
  case (which === 190): // . for fullscreen
    ev.preventDefault();
    this.togglePane('full');
    break;
  case (which === 68): // d for layers/data
    ev.preventDefault();
    this.togglePane('layers');
    break;
  case (which === 191): // / for settings
    ev.preventDefault();
    this.togglePane('settings');
    break;
  case ((which > 48 && which < 58) && ev.altKey): // 1-9 + alt
    var tab = $('#tabs a.tab')[which-48];
    if (tab) tab.click();
    break;
  default:
    return true;
  }
  return false;
};
Editor.prototype.zoomin = function(out) {
  map.setZoom(map.getZoom()+1);
};
Editor.prototype.zoomout = function() {
  map.setZoom(map.getZoom()-1);
};
Editor.prototype.scrollto = function(ev) {
    id = $(ev.currentTarget).attr('href').split('#').pop();
    document.getElementById(id).scrollIntoView();
    return false;
};
Editor.prototype.togglePane = function(name) {
  var loc = location.href;
  if (loc.indexOf('#'+name) === -1) {
    location.href = loc.substring(0, loc.indexOf('#'))+'#'+name;
  } else {
    location.href = loc.replace('#'+name, '#');
  }
};
Editor.prototype.expandall = function(ev) {
  button = $(ev.currentTarget);

  if ( button.hasClass('expanded') ) {
    $('.carto-ref').removeClass('active');
    button.removeClass('expanded')
  } else {
    $('.carto-ref').addClass('active');
    button.addClass('expanded');
  }
  return false;
};

Editor.prototype.messageclear = function() {
  messageClear();
  _(code).each(function(cm) {
    _(cm._cartoErrors||[]).each(cm.clearMarker);
    delete cm._cartoErrors;
  });
};

Editor.prototype.messagemodal = messageModal;
Editor.prototype.delstyle = delStyle;
Editor.prototype.tabbed = tabbedHandler;
Editor.prototype.addmapbox = addMapBox;

Editor.prototype.adddata = function(ev) {
  var target = $(ev.currentTarget);
  if (target.is('.active')) return false;
  var id = target.attr('href').split('#source-').pop();
  (new Source({id:id})).fetch({
    success: _(function(model, resp) {
      $('#data a.active').removeClass('active');
      $('#layers .js-menu-content').html(templates.sourcelayers(resp));
      target.addClass('active');
    }).bind(this),
    error: _(this.error).bind(this)
  });
  return false;
};
Editor.prototype.addtab = function(ev) {
  var field = $('#addtab-filename');
  var filename = field.val().split('.')[0] + '.mss';
  if (!code[filename]) {
    $("<a rel='"+filename+"' href='#code-"+filename.replace(/[^\w+]/g,'_')+"' class='strong quiet tab js-tab round pad0 truncate contain'>"+filename.replace(/.mss/,'')+" <span class='icon trash js-deltab pin-right round-right pad0y'></span></a>").insertAfter('nav#tabs > a:last-of-type');
    code[filename] = Tab(filename, '');
  }
  field.val('');
  window.location.hash = '#';
  return false;
};
Editor.prototype.deltab = function(ev) {
  var styles = this.model.get('styles');
  var parent = $(ev.currentTarget).parent();
  var target = parent.attr('rel');
  if (!styles[target]) {
    $(code[target].getWrapperElement()).remove();
    parent.remove();
  } else if (confirm('Remove stylesheet "' + target + '"?')) {
    $(code[target].getWrapperElement()).remove();
    parent.remove();
    delete styles[target];
    delete code[target];
    this.model.set({styles:styles});
    // Set first tab to active.
    var tabs = $('.js-tab', '#tabs');
    if (parent.is('.active') && tabs.size())
      this.tabbed({ currentTarget:tabs.get(tabs.length - 1) });
  }
  return false;
};
Editor.prototype.recache = function(ev) {
  this.model.set({_recache:true});
  this.save(ev);
  return false;
};
Editor.prototype.save = function(ev, options) {
  // Set map in loading state.
  $('#full').addClass('loading');

  var attr = {};
  // Grab settings form values.
  _($('#settings').serializeArray()).reduce(function(memo, field) {
    if (field.name === 'minzoom' || field.name === 'maxzoom' || field.name === 'scale') {
      memo[field.name] = parseInt(field.value,10);
    } else if (field.name && field.value) {
      memo[field.name] = field.value;
    }
    return memo;
  }, attr);
  // Grab interactivity form values.
  _($('#interactivity').serializeArray()).reduce(function(memo, field) {
    memo[field.name] = field.value;
    return memo;
  }, attr);
  // Grab styles, sources.
  attr.styles = _(code).reduce(function(memo, cm, k) {
    if (k !== 'template') memo[k] = cm.getValue();
    return memo;
  }, {});
  attr.source = $('#layers .js-source').map(function() {
    return $(this).attr('id').split('source-').pop();
  }).get().shift();
  attr.template = code.template ? code.template.getValue() : '';

  if (this.model.get('_prefs').saveCenter) {
    var lon = map.getCenter().lng % 360;
    lon += (lon < -180) ? 360 : (lon > 180) ? -360 : 0;
    attr.center = [lon , map.getCenter().lat, map.getZoom() ];
  }

  options = options || {
    success:_(this.refresh).bind(this),
    error: _(this.error).bind(this)
  };
  this.model.save(attr, options);

  return ev && !!$(ev.currentTarget).is('a');
};
Editor.prototype.error = function(model, resp) {
  this.messageclear();

  if (!resp.responseText)
    return this.messagemodal('Could not save style "' + model.id + '"');

    // Assume carto.js specific error array format response.
  _(JSON.parse(resp.responseText).message.toString().split('\n')).chain()
    .compact()
    .map(function(e) { return e.match(/^(Error: )?([\w.]+):([\d]+):([\d]+) (.*)$/) || e; })
    .each(_(function(e) {
      if (_(e).isArray()) {
        var id = e[2];
        var ln = parseInt(e[3]) - 1;
        code[id]._cartoErrors = code[id]._cartoErrors || [];
        code[id]._cartoErrors.push(ln);
        code[id].setMarker(ln, "<a class='quiet' id='error-"+ln+"' href='#error-"+ln+"'>%N%</a><span class='small js-message message'><a href='#' class='icon x fr quiet'></a>"+e[5]+"</span>", 'error');
      } else {
        return this.messagemodal(e);
      }
    }).bind(this));
};
Editor.prototype.refresh = function(ev) {
  this.messageclear();

  if (!map) {
    map = L.mapbox.map('map');
    map.setView([this.model.get('center')[1], this.model.get('center')[0]], this.model.get('center')[2]);
    map.on('zoomend', function() { $('#zoomedto').attr('class', 'contain z' + (map.getZoom()|0)); });
  }
  map.options.minZoom = this.model.get('minzoom');
  map.options.maxZoom = this.model.get('maxzoom');

  // Refresh map baselayer.
  if (this.model.get('_prefs').baselayer) {
    baselayer = baselayer || L.mapbox.tileLayer(this.model.get('_prefs').baselayer).addTo(map);
  } else if (baselayer) {
    map.removeLayer(baselayer);
  }

  // Refresh map layer.
  if (tiles) map.removeLayer(tiles);
  tiles = L.mapbox.tileLayer({
    tiles: ['/style/{z}/{x}/{y}.png?id=<%=style.id%>&mtime=' + this.model.get('mtime') ],
    minzoom: this.model.get('minzoom'),
    maxzoom: this.model.get('maxzoom')
  })
  .on('tileload', statHandler('drawtime'))
  .on('load', errorHandler)
  .addTo(map);

  // Refresh gridcontrol template.
  if (grids) map.removeLayer(grids);
  if (gridc) map.removeControl(gridc);
  if (this.model.get('template') && this.model.get('interactivity_layer')) {
    grids = L.mapbox.gridLayer({
      grids: ['/style/{z}/{x}/{y}.grid.json?id=<%=style.id%>&mtime=' + this.model.get('mtime') ],
      minzoom: this.model.get('minzoom'),
      maxzoom: 22
    });
    gridc = L.mapbox.gridControl(grids, {
      follow: true,
      template: this.model.get('template')
    });
    map.addLayer(grids);
    map.addControl(gridc);
  }

  // Refresh map title.
  $('title').text(this.model.get('name'));
  $('.js-name').text(this.model.get('name') || 'Untitled');

  // Set canvas background color.
  if (this.model.get('background'))
    $('#map').css({'background-color':this.model.get('background')});

  return false;
};

var editor = new Editor({
  el: document.body,
  model: new Style(<%= JSON.stringify(style) %>)
});
editor.refresh();

// Syntax highlighting for carto ref.
$('pre.carto-snippet').each(function(i, elem) {
  var text = $(elem).text();
  $(elem).empty();
  CodeMirror.runMode(text, {name:'carto',reference:window.cartoRef}, $(elem).get(0));
});
</script>

<% if (test) { %>
  <link href='/app/test/mocha.css' rel='stylesheet' />
  <style>body{padding:0;line-height:1;}/*Bad Mocha*/</style>
  <script src='/app/test/chai.js'></script>
  <script src='/app/test/mocha.js'></script>
  <div id='mocha' class='modal target round pad2 col6 scroll-styled row8 margin3 fill-light'></div>
  <div id='mask' class='fill-darken2 animate'></div>
  <script src='/app/test/app.test.js'></script>
<% } %>

</body>
</html>
