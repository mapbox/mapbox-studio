<!DOCTYPE html>
<html>

<head>
  <meta charset='UTF-8'/>
  <link href='/ext/codemirror.css' rel='stylesheet' />
  <link href='/ext/mapbox.css' rel='stylesheet' />
  <link href='/ext/base/base.css' rel='stylesheet' />
  <link href='/app/app.css' rel='stylesheet' />
  <link href='/app/source.css' rel='stylesheet' />
  <script src='/ext/underscore-min.js'></script>
  <script src='/ext/codemirror.js'></script>
  <script src='/ext/codemirror.runmode.js'></script>
  <script src='/ext/codemirror.sql.js'></script>
  <script src='/ext/jquery-2.0.3.min.js'></script>
  <script src='/ext/jquery.sortable.js'></script>
  <script src='/ext/backbone.js'></script>
  <script src='/ext/mapbox.js'></script>
  <script src='/app/lib.js'></script>
  <title><%= source.name %></title>
</head>

<body id='view' class='dark'>

<div id='perf'></div>

<form id='settings' class='z10 animate fill-darken2 scroll-styled col12 pin-left'>
<div class='scroll-styled col6 pin-right fill-blue'>
  <%= this.history(obj) %>
</div>
<div class='col6 pin-left'>
  <div class='project-settings dark fill-dark round contain col6 pin-topleft'>
    <% var disabled = remote ? "disabled='disabled'" : ''; %>
    <header class='pad1 keyline-bottom'>
      <h4>Settings</h4>
      <a class='pin-topright inline quiet pad1 icon x' href='#'></a>
    </header>

    <div class='pad2'>
      <fieldset>
        <section class='space-bottom1'>
          <label>Name</label>
          <input <%= disabled %> class='stretch short small' name='name' type='text' value='<%= _(source.name).escape() %>'/>
        </section>
        <section class='space-bottom1'>
          <label>Description</label>
          <textarea <%= disabled %> class='stretch short small' name='description' type='text' cols='60' rows='8'><%= source.description %></textarea>
        </section>
        <section class='space-bottom1'>
          <label>Attribution</label>
          <input <%= disabled %> class='stretch short small' name='attribution' type='text' value='<%= _(source.attribution).escape() %>'></textarea>
        </section>
      </fieldset>
      <fieldset class='pad1 space-bottom2 keyline-all round'>
        <section class='space-bottom0 clearfix'>
          <label class='inline col4'>Minzoom</label>
          <input <%= disabled %> id='minzoom' name='minzoom' class='min' type='range' value='<%= source.minzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "max", "#maxzoom");' />
          <span class='small quiet code inline range' id='minzoom-val'><%= source.minzoom %></span>
        </section>
        <section class='space-bottom0 clearfix'>
          <label class='inline col4'>Maxzoom</label>
          <input <%= disabled %> id='maxzoom' name='maxzoom' class='max' type='range' value='<%= source.maxzoom %>' min='0' max='22' step='1' onchange='rangeHandler(this, "min", "#minzoom");' />
          <span class='small quiet code inline range' id='maxzoom-val'><%= source.maxzoom %></span>
        </section>
      </fieldset>

      <% if (!remote) { %>
        <section class='pill col12 clearfix'><!--
          --><a href='#' class='quiet button col6 submit icon js-save floppy'>Save</a><!--
          --><a href='/mbtiles?id=<%= source.id %>' class='quiet button col6 submit icon share'>Export</a>
        </section>
      <% } else { %>
        <section class='text-right space clearfix'>
          <a href='#' class='col6 fr button submit icon js-save floppy'>Save</a>
        </section>
      <% } %>
    </div>
  </div>
</div>
</form>

<div id='full' class='clip animate col6 pin-left clip'>
  <div id='title' class='contain inline pin-topleft z10'>
    <div class='inline clip fill-darken2 row1'>
      <a href='#settings' class='icon inline sprocket button unround js-name quiet'><%= source.name || 'Untitled' %></a><!--
      <% if (source._tmp) { %>
      --><a class='button icon floppy settings-n js-save unround' href='#saveas'>Save as</a>
      <% } else { %>
      --><a class='button icon floppy settings-n js-save unround' href='#'>Save</a>
      <% } %>
    </div>
  </div>
  <div id='map' class='animate dark' style='background-color:<%=source.background%>;'></div>
  <div id='map-overlay'></div>
  <div id='map-errors'></div>
  <div id='zoomedto' class='fill-dark contain z<%=source.center[2]%>'></div>

  <div id='map-controls' class='pad1'>
    <div class='inline'>
      <div class='round keyline-all z1 fill-dark'>
        <a href='#' id='zoom-in' class='icon plus keyline-right quiet'></a><!--
        --><a href='#' id='zoom-out' class='icon minus keyline-right quiet'></a>
      </div>
    </div>
    <a href='#full' class='full-n round inline keyline-all fill-dark icon fullscreen quiet'></a>
    <a href='#' class='full-y round keyline-all fill-dark dark icon close'></a>
  </div>
  <div id='refresh' class='animate fill-darken2 col12 pad2 pin-bottom'>
    <span class='icon info'>To view inspect and visibility adjustments, <a href='#' class='js-save'>Save now</a>.</span>
    <a href='#' class='quiet pin-topright inline pad1 icon close'></a>
  </div>

</div>

<%
var revlayers = remote ? source.vector_layers.slice(0) : source.Layer.slice(0);
revlayers.reverse();
%>
<div id='layers' class='z1 animate menu source-menu fill-dark dark col6 pin-right'>
  <nav class='row1 col12 pin-top keyline-bottom fill-dark z1'>
    <% if (remote) { %>
    <strong class='small inline pad1'>Layers</strong>
    <% } else { %>
    <div class='pin-topleft pad0'><a href='#addlayer' class='button quiet short icon plus'>Layers</a></div>
    <% } %>
    <div class='center pin-right strong small'>
      <span class='pad0x pad1y keyline-left inline layer-label'>Inspect</span><!--
      --><span class='pad0x pad1y inline keyline-left layer-label'>Visibility</span><!--
      --><% if (!remote) { %><!--
      --><span class='pad0x pad1y keyline-left inline layer-label'>Delete</span><!--
      --><% } %>
    </div>
  </nav>
  <div class='js-menu-content pin-left col12 top4 scroll-styled'>
    <% _(revlayers).each(function(l) { %>
      <% print(this.layeritem(_({_prefs:source._prefs}).extend(l))); %>
    <% }.bind(this)); %>
  </div>
</div>
<div id='editor'>
<% _(revlayers).each(function(l) {
  if (remote) {
    print(this['layerremote'](l));
  } else {
    var type = (l.Datasource && l.Datasource.type);
    if (this['layer' + type]) print(this['layer' + type](_({
        tm: tm,
        vt: source.vector_layers.filter(function(v) { return v.id === l.id })[0]
    }).extend(l)));
  }
}.bind(this)); %>
</div>

<% if (!remote) print(this.modalbrowser({
  id: 'browsefile',
  cwd: cwd,
  label: 'Select'
})); %>

<%= this.modalmessage() %>
<%= this.modalmapbox() %>
<%= this.modalbrowseropen({cwd:cwd, type:'style'}) %>
<%= this.modalbrowseropen({cwd:cwd, type:'source'}) %>
<%= source._tmp ? this.modalbrowsersave({cwd:cwd, type:'source'}) : '' %>

<% if (!remote) { %>
<form id='addlayer' class='modal round pad2 col6 margin3 fill-light'>
  <a class='quiet pad1 icon x dot pin-topright submit' href='#'></a>
  <fieldset class='col8 margin2 space-bottom1'>
    <input class='col12 space-bottom1' type='text' placeholder='layername' size='20' name='id' pattern='\w+'/>
  </fieldset>
  <fieldset class='col8 margin2'>
    <div class='col12 scroll-styled radio-buttons'>
      <input name='type' type='radio' id='addlayer-postgis' value='postgis'>
      <label class='contain icon check quiet short button col12' for='addlayer-postgis'>
        PostGIS
        <span class='micro pin-right quiet pad0y pad1x'>Database</span>
      </label>
      <input name='type' type='radio' id='addlayer-shape' value='shape'>
      <label class='contain icon check quiet short button col12' for='addlayer-shape'>
        Shapefile
        <span class='micro pin-right quiet pad0y pad1x'>.shp</span>
      </label>
      <input name='type' type='radio' id='addlayer-geojson' value='geojson'>
      <label class='contain icon check quiet short button col12' for='addlayer-geojson'>
        GeoJSON
        <span class='micro pin-right quiet pad0y pad1x'>.json &amp; .geojson</span>
        </label>
      <input name='type' type='radio' id='addlayer-sqlite' value='sqlite'>
      <label class='contain icon check quiet short button col12' for='addlayer-sqlite'>
        SQLite
        <span class='micro pin-right quiet pad0y pad1x'>Database</span>
      </label>
      <input name='type' type='radio' id='addlayer-csv' value='csv'>
      <label class='contain icon check quiet short button col12' for='addlayer-csv'>
        CSV
        <span class='micro pin-right quiet pad0y pad1x'>.csv</span>
      </label>
    </div>
  </fieldset>
  </div>
  <div class='center'>
  <input class='js-reset-mode margin2 col8' type='submit' value='New layer'/>
  </div>
</form>
<% } %>

<div id='mask' class='fill-darken2 animate'></div>

<script>
var map, tiles, grids, gridc;

var templates = {};
templates.layeritem = <%= this.layeritem.source %>;
templates.layerconf = <%= this.layerconf.source %>;
templates.layerfields = <%= this.layerfields.source %>;
templates.layershape = <%= this.layershape.source %>;
templates.layerpostgis = <%= this.layerpostgis.source %>;
templates.layergeojson = <%= this.layergeojson.source %>;
templates.layersqlite = <%= this.layersqlite.source %>;
templates.layercsv = <%= this.layercsv.source %>;
templates.xraycolor = <%= this.xraycolor.source %>;

var tm = {};
tm.srs = <%= JSON.stringify(tm.srs) %>;

statHandler('srcbytes')();

var Layer = function(id, datasource) {
  var code;
  if (datasource && (datasource.type === 'postgis' || datasource.type === 'sqlite')) {
    code = CodeMirror($('#layers-' + id + ' div.sql').get(0), {
      value: datasource.table,
      lineNumbers: true,
      mode: 'text/x-plsql'
    });
    code.getWrapperElement().id = 'layers-' + id + '-code';
  }
  var layer = {
    code: code,
    form: $('#layers-' + id),
    item: $('#layers #'+id)
  };
  layer.refresh = function() {
    var l = _(editor.model.get('vector_layers')).find(function(l) { return l.id === id });
    var fields = l.fields || {};
    $('div.fields', layer.form).html(templates.layerfields(fields));
  };
  layer.get = function() {
    var attr = _($('#layers-' + id).serializeArray()).reduce(function(memo, field) {
      // @TODO determine what causes empty field names.
      if (!field.name) return memo;
      var group = field.name.split('-')[0];
      var name = field.name.split('-').slice(1).join('-');
      switch (group) {
      case 'fields':
      case 'properties':
      case 'Datasource':
        memo[group] = memo[group] || {};
        memo[group][name] = parseInt(field.value,10).toString() === field.value ? parseInt(field.value, 10) : field.value;
        break;
      default:
        memo[field.name] = parseInt(field.value,10).toString() === field.value ? parseInt(field.value, 10) : field.value;
        break;
      }
      return memo;
    }, {});
    if (code) {
      attr.Datasource = attr.Datasource || {};
      attr.Datasource.table = code.getValue();
    }
    return attr;
  };
  return layer;
};
var layers = _(<%=JSON.stringify(revlayers)%>).reduce(function(memo, l) {
  memo[l.id] = Layer(l.id, l.Datasource);
  return memo;
}, {});

var Source = Backbone.Model.extend({});
Source.prototype.url = function() { return '/source.json?id=' + this.get('id'); };

var Editor = Backbone.View.extend({});
Editor.prototype.events = {
  'click .js-save': 'save',
  'click .js-reset-mode': 'resetmode',
  'click .editor .js-tab': 'togglemode',
  'click .layer .js-delete': 'deletelayer',
  'click .layer .xrayswatch': 'togglelayer',
  'click .layer .xrayinspector': 'toggleinspector',
  'click .js-browsefile': 'browsefile',
  'click #settings .js-tab': 'tabbed',
  'click #settings .js-ref-delete': 'delstyle',
  'submit #addlayer': 'addlayer',
  'submit #addmapbox': 'addmapbox',
  'click #zoom-in': 'zoomin',
  'click #zoom-out': 'zoomout',
  'keydown': 'keys'
};
Editor.prototype.keys = function(ev) {
  // Escape. Collapses windows, dialogs, modals, etc.
  if (ev.which === 27) {
    window.location.href = '#';
  }

  if ((!ev.ctrlKey && !ev.metaKey) || ev.shiftKey) return;
  var which = ev.which;
  switch (true) {
  case (which === 83): // s
    this.save();
    break;
  case (which === 190): // . for fullscreen
    ev.preventDefault();
    this.togglePane('full');
    break;
  case (which === 191): // / for settings
    ev.preventDefault();
    this.togglePane('settings');
    break;
  default:
    return true;
  }
  return false;
};
Editor.prototype.zoomin = function(out) {
  map.setZoom(map.getZoom()+1);
};
Editor.prototype.zoomout = function() {
  map.setZoom(map.getZoom()-1);
};
Editor.prototype.togglePane = function(name) {
  var loc = location.href;
  if (loc.indexOf('#'+name) === -1) {
    location.href = loc.substring(0, loc.indexOf('#'))+'#'+name;
  } else {
    location.href = loc.replace('#'+name, '#');
  }
}
Editor.prototype.togglemode = function(ev) {
  var target = $(ev.currentTarget);
  switch (target.attr('href').split('#editor-').pop()) {
    case 'sql':
        $('body').addClass('sql').removeClass('conf').removeClass('fields');
        break;
    case 'conf':
        $('body').addClass('conf').removeClass('sql').removeClass('fields');
        break;
    case 'fields':
        $('body').addClass('fields').removeClass('sql').removeClass('conf');
        break;
  }
  tabbedHandler(ev);
  return false;
};
Editor.prototype.resetmode = function(ev) {
  $('body').removeClass('fields').removeClass('sql').removeClass('conf');
  $('.editor a.js-tab[href=#editor-conf]').addClass('active').siblings('a').removeClass('active');
};
Editor.prototype.togglelayer = function(ev) {
  $(ev.currentTarget).toggleClass('disabled');
};
Editor.prototype.toggleinspector = function(ev) {
  $('.js-layer .xrayinspector.active').removeClass('active');
  $(ev.currentTarget).addClass('active');
};
Editor.prototype.addlayer = function(ev) {
  var values = _($('#addlayer').serializeArray()).reduce(function(memo, field) {
    memo[field.name] = field.value;
    return memo;
  }, {});

  if (!values.id || !templates['layer' + values.type]) return false;

  if (!layers[values.id]) {
    var layer = {
      tm: tm,
      vt: {},
      id: values.id,
      properties: {
        minzoom:0,
        maxzoom:22,
        'buffer-size':0
      },
      Datasource: {
        type: values.type
      }
    };
    $('#editor').prepend(templates['layer' + values.type](layer));
    $('#layers .js-menu-content').prepend(templates['layeritem'](layer));
    layers[values.id] = Layer(values.id, layer.Datasource);

    window.location.hash = '#layers-' + values.id;
    $('#layers .js-menu-content').sortable('destroy').sortable();
  } else {
    window.location.hash = '#';
  }
  return false;
};
Editor.prototype.deletelayer = function(ev) {
  var id = $(ev.currentTarget).attr('id').split('-').pop();
  if (!layers[id]) return false;
  if (confirm('Remove layer "' + id + '"?')) {
    layers[id].form.remove();
    layers[id].item.remove();
    $('#layers .js-menu-content').sortable('destroy').sortable();
    delete layers[id];
  }
  window.location.href = '#';
  return false;
};
Editor.prototype.error = function(model, resp) {
  this.messageclear();
  if (resp.responseText) {
    this.messagemodal(resp.responseText);
  } else {
    this.messagemodal('Could not save source "' + model.id + '"');
  }
};
Editor.prototype.save = function(ev, options) {
  // Set map in loading state.
  $('#full').addClass('loading');

  // Grab settings form values.
  var attr = _($('#settings').serializeArray()).reduce(function(memo, field) {
    memo[field.name] = parseInt(field.value,10).toString() === field.value ? parseInt(field.value, 10) : field.value;
    return memo;
  }, this.model.attributes);

  // Grab layers. Reverse at save time.
  attr.Layer = _(layers).map(function(l) { return l.get() });
  attr.Layer.reverse();

  // Save center, disabled layers.
  attr._prefs = attr._prefs || {};
  if (this.model.get('_prefs').saveCenter) {
    var lon = map.getCenter().lng % 360;
    lon += (lon < -180) ? 360 : (lon > 180) ? -360 : 0;
    attr.center = [lon , map.getCenter().lat, map.getZoom() ];
  }
  attr._prefs.inspector = $('#layers .js-layer:has(.xrayinspector.active)').size()
    ? $('#layers .js-layer:has(.xrayinspector.active)').attr('id')
    : false;
  attr._prefs.disabled = _($('#layers .layer').map(function(v) {
    return $('.xrayswatch.disabled', this).size()
        ? $(this).attr('id')
        : false;
  })).compact();

  options = options || {
    success:_(this.refresh).bind(this),
    error: _(this.error).bind(this)
  };
  this.model.save(attr, options);

  return ev && !!$(ev.currentTarget).is('a');
};
Editor.prototype.refresh = function(ev) {
  this.messageclear();

  if (!map) {
    map = L.mapbox.map('map');
    map.setView([this.model.get('center')[1], this.model.get('center')[0]], this.model.get('center')[2]);
    map.on('zoomend', function() { $('#zoomedto').attr('class', 'contain z' + (map.getZoom()|0)); });
  }
  map.options.minZoom = this.model.get('minzoom');
  map.options.maxZoom = 22;

  // Refresh map layer.
  if (tiles) map.removeLayer(tiles);
  tiles = L.mapbox.tileLayer({
    tiles: ['/style/{z}/{x}/{y}.png?id=<%=source._style%>&mtime=' + this.model.get('mtime') ],
    minzoom: this.model.get('minzoom'),
    maxzoom: 22
  })
  .on('tileload', statHandler('srcbytes'))
  .on('load', errorHandler)
  .addTo(map);

  // Refresh gridcontrol template.
  if (grids) map.removeLayer(grids);
  if (gridc) map.removeControl(gridc);
  if (this.model.get('_template')) {
    grids = L.mapbox.gridLayer({
      grids: ['/style/{z}/{x}/{y}.grid.json?id=<%=source._style%>&mtime=' + this.model.get('mtime') ],
      minzoom: this.model.get('minzoom'),
      maxzoom: 22
    });
    gridc = L.mapbox.gridControl(grids, {
      follow: true,
      template: this.model.get('_template')
    });
    map.addLayer(grids);
    map.addControl(gridc);
  }

  // Refresh map title.
  $('title').text(this.model.get('name'));
  $('.js-name').text(this.model.get('name') || 'Untitled');

  // Clear save notice.
  if (window.location.hash === '#refresh') {
    window.location.hash = '#';
  };

  // Rerender fields forms.
  _(layers).each(function(l) { l.refresh() });

  return false;
};
Editor.prototype.browsefile = function(ev) {
  var target = $(ev.currentTarget).siblings('input[name=Datasource-file]');
  $('.browsefile-pending').removeClass('browsefile-pending');
  target.addClass('browsefile-pending');
  $('#browsefile input[name=basename]').attr('pattern', target.attr('pattern'));
  $('#browsefile input[name=basename]').attr('placeholder', target.attr('placeholder'));
};

Editor.prototype.messagemodal = messageModal;
Editor.prototype.messageclear = messageClear;
Editor.prototype.delstyle = delStyle;
Editor.prototype.tabbed = tabbedHandler;
Editor.prototype.addmapbox = addMapBox;

var editor = new Editor({
  el: document.body,
  model: new Source(<%= JSON.stringify(source) %>)
});
editor.refresh();

<% if (!remote) { %>
// File browser.
new views.Browser({
  el: $('#browsefile'),
  filter: function(file) {
    var target = $('.browsefile-pending');
    var pattern = target.size() && target.attr('pattern') && new RegExp(target.attr('pattern'));
    if (pattern) {
        return file.type === 'dir' || pattern.test(file.basename);
    } else {
        return file.type === 'dir';
    }
  },
  callback: function(err, filepath) {
    var target = $('.browsefile-pending');
    if (err || !target.size()) {
      window.location.href = '#';
    } else {
      target.val(filepath);
      window.location.href = '#' + target.parents('form').attr('id');
    }
  }
});
// Sortable layers.
$('#layers .js-menu-content').sortable();
$('#layers .js-menu-content').bind('sortupdate', function(ev, ui) {
  var ids = $('#layers .js-menu-content .js-layer').map(function() {
    return $(this).attr('id');
  }).get();
  layers = _(ids).reduce(function(memo, id) {
    memo[id] = layers[id];
    return memo;
  }, {});
});
<% } %>
</script>
</body>

</html>
